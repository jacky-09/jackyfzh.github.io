<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端学习路线（干货）</title>
      <link href="/2022/05/10/qian-duan-learn-line/"/>
      <url>/2022/05/10/qian-duan-learn-line/</url>
      
        <content type="html"><![CDATA[<p>以下内容教程包含html&#x2F;css&#x2F;js&#x2F;vue等，给小白。欢迎<strong>友好的</strong>指正，大佬勿喷。</p><h2 id="Html学习"><a href="#Html学习" class="headerlink" title="Html学习"></a>Html学习</h2><ol><li><strong>入门教程（词典版）</strong>：<a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></li><li><strong>入门教程（精简版）</strong>：<a href="https://www.fqysharing.top/2021/05/23/basic_html/">https://www.fqysharing.top/2021/05/23/basic_html&#x2F;</a></li><li><strong>页面美化库教程（官网版）</strong>：<a href="https://getbootstrap.com/">https://getbootstrap.com/</a></li><li><strong>页面美化库教程（中文版）</strong>：<a href="https://www.w3school.com.cn/bootstrap5/index.asp">https://www.w3school.com.cn/bootstrap5/index.asp</a></li><li><strong>实战教程（进阶版）</strong>：<a href="https://zhuanlan.zhihu.com/p/210920545?ivk_sa=1024320u">https://zhuanlan.zhihu.com/p/210920545?ivk_sa&#x3D;1024320u</a></li></ol><blockquote><p><strong>笔者的话：</strong></p><ul><li>bootstrap页面美化可以好好学一学</li><li>实战教程不用做了，到时候做vue的实战</li></ul></blockquote><h2 id="Css学习"><a href="#Css学习" class="headerlink" title="Css学习"></a>Css学习</h2><ol><li><strong>入门教程（词典版）</strong>：<a href="https://www.w3school.com.cn/css/index.asp">https://www.w3school.com.cn/css/index.asp</a></li><li><strong>入门教程（精简版）</strong>：<a href="https://www.fqysharing.top/2021/05/23/basic_css/">https://www.fqysharing.top/2021/05/23/basic_css&#x2F;</a></li></ol><blockquote><p><strong>笔者的话：</strong></p><p>除非对自己的配色和审美有绝对自信，简单学一学就可以了，开发可以用bootstrap。</p></blockquote><h2 id="Javascript学习"><a href="#Javascript学习" class="headerlink" title="Javascript学习"></a>Javascript学习</h2><ol><li><strong>入门教程（词典版）</strong>：<a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a></li><li><strong>入门教程（精简版）</strong>：<a href="https://www.fqysharing.top/2021/07/17/basic_js_summary/">https://www.fqysharing.top/2021/07/17/basic_js_summary&#x2F;</a></li></ol><blockquote><p><strong>笔者的话：</strong></p><p>JavaScript的入门曲线不算曲折，但是深入后很复杂，潜力也很大。要了解基本的语法，但是不必太过于详细的、花太多时间去学习基础。把时间花在vue这类的框架上更有价值。</p></blockquote><h2 id="Vuejs学习"><a href="#Vuejs学习" class="headerlink" title="Vuejs学习"></a>Vuejs学习</h2><ol><li><strong>官网教程（看不懂版）</strong>：<a href="https://cn.vuejs.org/index.html">https://cn.vuejs.org/index.html</a></li><li><strong>入门教程（极简版）</strong>：<a href="https://jackyfzh.github.io/2020/08/12/drf-vue-vue-jichu/">https://jackyfzh.github.io/2020/08/12/drf-vue-vue-jichu/</a></li><li><strong>实战教程（必看版）</strong>：<a href="https://zmrenwu.com/courses/vue2x-todo-tutorial/">https://zmrenwu.com/courses/vue2x-todo-tutorial/</a></li></ol><blockquote><p>笔者的话：</p><p>我认为vue是未来的大势所趋，认真学习。初学者依次看2和3，基本就算是入门啦。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文持续更新，希望对大家有帮助。</p><p><strong>文章首发于<a href="http://jackyfzh.github.io/">Jacky的个人博客</a>，转载须注明。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion从入门到卸载(上)</title>
      <link href="/2022/05/06/notion-course-1/"/>
      <url>/2022/05/06/notion-course-1/</url>
      
        <content type="html"><![CDATA[<p>记得前段时间我写过一期博客，名为“<a href="https://jackyfzh.github.io/2022/02/27/markdown-tool-marktext/">高效的markdown笔记工具——Marktext</a>”，后来随着使用我发现这款工具仅仅是<strong>Typora的替代品</strong>。虽然在日常使用中基本足够，但是显然不够<strong>优雅</strong><em>&#x2F;doge</em>。前段时间刷公众号，偶然发现了<a href="https://mp.weixin.qq.com/s/XWZH7zEPdSnscI9hWurQVg">这篇文章</a>，于是便开始了<del>折腾</del>探索。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>现在网络上推荐的笔记工具层出不穷，那么究竟怎么选择呢？首先要明确一点，不是别人说好就是好，<strong>适合自己</strong>的才是最好的。所以，读者不妨先列出几条自己的选择标准，我的标准如下：</p><ul><li><strong>免费</strong>，或有免费版本（反例Typora）</li><li><strong>外观</strong>，干净利索不繁琐（反例VNote）</li><li><strong>多合一</strong>，一个软件完成多个软件的作用（反例Marktext）</li><li><strong>多平台</strong>，至少安卓和Windows可用（反例贼多）</li><li><strong>云笔记</strong>，支持免费的线上同步（反例贼多）</li><li><strong>导入方便</strong>，可以支持markdown导入（反例印象笔记）</li><li><strong>导出方便</strong>，可以支持markdown导出（反例印象笔记）</li></ul><p>嗨嗨，这要求是不是高了点。不过u1s1，notion是可以<strong>完美符合</strong>的。</p><h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><p>接下来，我们就正式开始啦。现在，访问<a href="https://notion.so/">Notion官方网站</a>，在这里按照提示注册账号，如图所示：</p><p><img src="https://s1.ax1x.com/2022/05/06/OumLNV.png" alt="注册页面"></p><p>按照要求，以此输入<strong>邮箱</strong>，并输入邮件<strong>验证码</strong>，便可登录。登录后跳转类似如下页面：</p><p><img src="https://s1.ax1x.com/2022/05/06/Oumj9U.md.png" alt="跳转页面"></p><p>完美！这个是我已经配置完成后的种草图，教程完结后会达到<strong>一样的效果</strong>。</p><p>现在，读者如果没有客户端需求，便可以退出等待下一期教程了。如果要下载客户端，请继续看。</p><h2 id="使用客户端"><a href="#使用客户端" class="headerlink" title="使用客户端"></a>使用客户端</h2><p>接下来，请访问<a href="https://www.notion.so/desktop">这个页面</a>，即可看到如下页面，随后请读者按照自己的系统选择相应的安装包。</p><p><img src="https://s1.ax1x.com/2022/05/06/OumOhT.md.png" alt="安装包页面"></p><p>下载安装包后，读者请自行双击安装，本文不再赘述。</p><p>不过，经本人亲测，大陆环境下无法安装安卓版，可以使用如下的网盘链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">共享链接：https://pan.baidu.com/s/4iAYOsst</span><br></pre></td></tr></table></figure><p>接下来把这个apk文件保存的安卓手机，双击即可运行安装包。ios用户在官网可以直接下载。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本教程会持续更新第二期和第三期，尽请期待。</p><blockquote><p>注意：本文首发于<a href="https://jackyfzh.github.io/2022/05/06/notion-course-1/">Jacky的个人博客</a> 转载须著名原链接</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于“喜欢”的思考————致青春的我</title>
      <link href="/2022/03/21/think-about-love/"/>
      <url>/2022/03/21/think-about-love/</url>
      
        <content type="html"><![CDATA[<blockquote><p>婚姻是一座围城，城外的人想进去，城里的人想出来。爱情多半是不成功的，要么苦于终成眷属的厌倦，要么苦于爱而不得的悲哀。旅行是最劳顿，最麻烦，叫人本相必现的时候。经过长期苦旅行而彼此不讨厌的人，才可以结交。</p><p>——摘自钱钟书《围城》</p></blockquote><h2 id="小引"><a href="#小引" class="headerlink" title="小引"></a>小引</h2><p>谈到“<strong>喜欢</strong>”或是“<strong>爱情</strong>”一类的话题，通常是<strong>隐晦而羞涩</strong>的，但在人生中确实是无可避免的事情。故而现在我便要“<strong>犯一犯忌</strong>”，就我作为一个孩子的所谓“<strong>喜欢</strong>”的经历和感想，写一篇小小的<strong>随笔</strong>，我想这或许代表了我的成长。那么接下来，我就盘点我三次所谓“<strong>喜欢</strong>”的经历，并谈谈我自己的想法。</p><h2 id="第一次：不成熟的喜欢"><a href="#第一次：不成熟的喜欢" class="headerlink" title="第一次：不成熟的喜欢"></a>第一次：不成熟的喜欢</h2><p>第一次有“<strong>喜欢</strong>”的想法，还是在小学时候。我甚至并无法辨明那是否是真真正正的喜欢，或许只是一种好感罢了。第一次喜欢的人叫<strong>ZR（姓名的音序）</strong>，是我那是的同桌。现在想来那真是<strong>美好而纯真</strong>的时候，我俩一直有着很不错的关系，一同画画、写日记、写作业（她抄我）、分享喜怒哀乐……这样的关系一直维持了有一年多，当时我<strong>以为</strong>只是没捅破那一层窗户纸罢了。后来的后来，可想而知，我去捅破了那一层纸——找她<strong>表白</strong>咯。结果却事与惟愿，她十分“<strong>委婉</strong>”地拒绝了。</p><p>总而言之，从这个故事我悟出了个道理：<strong>学会耐心等待</strong>——<em>在表达情感之前，确定自己真的下定决心了。没做好准备之前，观望并维持关系才是最好的选择。</em></p><h2 id="第二次：由心底的萌动"><a href="#第二次：由心底的萌动" class="headerlink" title="第二次：由心底的萌动"></a>第二次：由心底的萌动</h2><blockquote><p>以下内容禁止肆意传播</p></blockquote><p>第二次有“<strong>喜欢</strong>”的想法倒是颇晚的，大概也就是一年前罢。这次我倒是真的“<strong>怦然心动</strong>”的，虽然后果一样惨（<em>忠告：绝对不要喜欢一个海王！</em>）。不知道是为什么，逐渐喜欢上了<strong>LL</strong>（惯称）。其实和她的交集是不算多的，一直算是暗恋。后来过了半年吧，我也和她说了。然后她给了一个<strong>不置可否</strong>的回答，现在看来明显就是在养鱼嘛！后来的后来，我发现我们三观之不合，再加上我喜欢上了第三位。</p><p>总而言之，这次经历我明白：<strong>谨慎地选人</strong>——<em>确保自己的眼光足够准确，不应该太过轻浮随便，慎重考虑</em>。</p><h2 id="第三次：相对成熟的喜欢"><a href="#第三次：相对成熟的喜欢" class="headerlink" title="第三次：相对成熟的喜欢"></a>第三次：相对成熟的喜欢</h2><p>第三次嘛，目前正在进行中，就留待“<strong>后人</strong>”评说咯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，从这<strong>三次</strong>经历中，我能够真正意义上<strong>有所收获</strong>，并且没有<strong>踩太多坑</strong>，这就足够了。希望有朝一日，我亦能<strong>与有情人终成眷属</strong>。</p><blockquote><p>本文会一直更新，直到很久很久……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 喜欢 </tag>
            
            <tag> 致青春 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效的markdown笔记工具——Marktext</title>
      <link href="/2022/02/27/markdown-tool-marktext/"/>
      <url>/2022/02/27/markdown-tool-marktext/</url>
      
        <content type="html"><![CDATA[<h2 id="小引"><a href="#小引" class="headerlink" title="小引"></a>小引</h2><p>最近，Typora<strong>收费</strong>的消息遍布各大知明博主身边。作为一款<strong>简洁易用</strong>的软件，Typora自发布当天便饱受关注。博主我就是其<strong>忠实粉丝</strong>之一，我的大部分博文都是<strong>由此写就</strong>。但是，Typora售价14.9元，博主实在是想换一款编辑器了<del>（<strong>绝对不是因为买不起！</strong>）</del>。</p><p>那么，经博主<strong>精挑细选</strong>，发现符合以下要求的，只有一款。</p><ol><li><p>界面<strong>清爽美观</strong></p></li><li><p>支持<strong>本地储存</strong></p></li><li><p><strong>独立</strong>编辑器</p></li><li><p>小于<strong>500m</strong></p></li></ol><p>所以综上，我选择了这款漂亮的编辑器：MarkText（本文就是以此写就）</p><p><img src="https://i.niupic.com/images/2022/02/27/9VpP.png" alt="照片展示"></p><p><em><strong>这款编辑器真的是YYDS！墙裂推荐！！！</strong></em></p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>MarkText安装包的下载方法也十分简单，进入它的<a href="https://marktext.app/">官网</a>，在首页即可发现Linux、Windows和Mac OS三种平台的下载链接，并附功能展示。（这官网贼简洁，爱了爱了~~）</p><p>下载完成后双击点开安装包，一步一步按要求选择即可（建议不要装在系统盘），篇幅有限，这里就不再赘述了。</p><h2 id="特色介绍（基础设置）"><a href="#特色介绍（基础设置）" class="headerlink" title="特色介绍（基础设置）"></a>特色介绍（基础设置）</h2><p>安装完成后，即可打开这款简介的app了。</p><p>博主这边建议各位写博客的伙伴们，创建一个单独的工作区，并在设置页面中调一下默认打开，这样就非常方便了。设置如图：</p><p><img src="https://i.niupic.com/images/2022/02/27/9VpQ.png" alt="设置"></p><blockquote><p>哇，设置界面都美哭了！</p></blockquote><h2 id="调整主题"><a href="#调整主题" class="headerlink" title="调整主题"></a>调整主题</h2><p>此外，MarkText令我喜欢的内容就是主题功能，接下来我们看看怎么调整主题。</p><p>进入设置–&gt;theme，如图所示页面，就可以切换主题啦！</p><p><img src="https://i.niupic.com/images/2022/02/27/9VpR.png" alt="主题"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么今天的介绍就到这里，祝大家食用愉快~~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 工具 </tag>
            
            <tag> MarkText </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github主页美化</title>
      <link href="/2022/01/19/github-page-beauty/"/>
      <url>/2022/01/19/github-page-beauty/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  好久没更新了哈，还是因为我“繁忙的学业”。</p></blockquote><p>废话不说，今天的主题就是github主页的美化。近来在github上，大佬们的主页是这样：</p><p><img src="https://i.niupic.com/images/2022/01/19/9TBh.png" alt="Dusai的主页"></p><p>或是这样：</p><p><img src="https://i.niupic.com/images/2022/01/19/9TBo.png" alt="Frost Ming的主页"></p><p>身为小白，我也决定动手做一做，达到了这样：</p><p><img src="https://i.niupic.com/images/2022/01/19/9TBg.png" alt="我的主页"></p><p>如此<strong>炫酷</strong>的首页，实现起来却很简单，下面是详细的<strong>教程</strong>。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>首先，第一步，新建一个和github用户名一样的仓库。</p><blockquote><ol><li>仓库必须是public，且勾选Readme</li><li>注意是用户名而不是昵称</li></ol></blockquote><p><img src="https://i.niupic.com/images/2022/01/19/9TBp.png" alt="github"></p><h2 id="开始布局"><a href="#开始布局" class="headerlink" title="开始布局"></a>开始布局</h2><p>接下来，点击<code>README.md</code>，然后点击铅笔样子的图标，开始编辑自己的主页。</p><p>排版可以支持&#96;&#96;Markdown<code>和</code>HTML&#96;两种方式，这能够<strong>让排版更加好看</strong>。</p><p>比如我的例子，像这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Hello, I am Jackyfeng 👏🏻</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Preview**</span>：From Shanghai, China 🏝, love coding 🐍. A student 🏫，love photographing beautiful things🌿 and a little fat🍔.</span><br><span class="line"></span><br><span class="line"><span class="strong">**Blog**</span>：[<span class="string">My Blog</span>](<span class="link">https://jackyfzh.github.io</span>)</span><br><span class="line"></span><br><span class="line"><span class="strong">**Contact**</span>：jackyfeng201314@163.com</span><br></pre></td></tr></table></figure><blockquote><p>  遇到喜欢的小表情，也可以复制到自己的简介里面</p></blockquote><p>除了自己的简介、名字之外，也可以加上自己的博客和联系方式等等。</p><p>接下来我们介绍一种好看的小徽章。</p><h2 id="加上徽章"><a href="#加上徽章" class="headerlink" title="加上徽章"></a>加上徽章</h2><p>在刚才的截屏里，大家一定发现了这种小徽章：</p><p><img src="https://i.niupic.com/images/2022/01/19/9TBq.png" alt="徽章1"></p><p><img src="https://i.niupic.com/images/2022/01/19/9TBr.png" alt="徽章2"></p><p>这种炫酷的徽章，其实只要一行代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://img.shields.io/badge/python-3.9-orange</span>)</span><br></pre></td></tr></table></figure><p>如果想要引入<strong>其他主题</strong>，到图1效果，只要这样写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://img.shields.io/badge/python-3.8-orange?style=for-the—badge&amp;logo=python&amp;logoColor=orange</span>)</span><br></pre></td></tr></table></figure><p><em>非常简单，不是吗？</em></p><h2 id="统计卡片"><a href="#统计卡片" class="headerlink" title="统计卡片"></a>统计卡片</h2><p>或者，也可以在引入一种好看的小功能：</p><p><img src="https://i.niupic.com/images/2022/01/19/9TBs.png"></p><p>基础版小卡片代码长这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Dusai&#x27;s GitHub stats</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=stacklens&amp;show_icons=true&amp;theme=radical</span>)</span><br></pre></td></tr></table></figure><p>此处如果想直接达到和博主一样的效果，再加上常用语言分析，可以直接这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/jackyfzh&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats.vercel.app/api?username=jackyfzh&amp;show_icons=true&amp;include_all_commits=true&amp;theme=vue&amp;hide_border=true&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Jacky&#x27;s github stats&quot;</span> /&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/jackyfzh&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats.vercel.app/api/top-langs/?username=jackyfzh&amp;layout=compact&amp;theme=vue&amp;hide_border=true&quot;</span> /&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>Ok，教程结束，满满干货。这样我们就拥有一个帅气的github主页啦！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android开发笔记：JTool</title>
      <link href="/2021/07/22/android-note/"/>
      <url>/2021/07/22/android-note/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>好久没有更新博客了，是因为前段时间要考试，阅读量蹭蹭地往下降<strong>（虽然本来也没多少）</strong>。虽然放暑假了依旧很忙<strong>（暑假作业的锅）</strong>，但是好歹能抽个空更新一篇了。这篇文章就是关于我最近在研究的Android开发，打算谈谈我的体验。</p><p><a href="/source/static/JTool.apk" download="JTool">可以点击该链接下载我开发的软件JTool</a></p><p><a href="https://github.com/jackyfzh/JTool">Github地址</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>好吧，废话了这么多，是时候进入正题了，接下来，我就为大家介绍我开发的软件JTool吧。</p><p>其实，这是一款安卓端的工具箱APP，目前已经开发了两个小工具，分别是<strong>词典（超鸡肋）</strong>和<strong>番茄钟（实用）</strong>。与其说这是一个正式APP，不如说是一个练习项目，记录学习用的，里面包含着一个初学者对于Android的初步探索和学习，很适合想源码阅读。前面已经把有关地址放出来了，敬请期待下一步更新吧！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装deepin</title>
      <link href="/2021/05/21/linux-deepin/"/>
      <url>/2021/05/21/linux-deepin/</url>
      
        <content type="html"><![CDATA[<p>最近，我使用VMware虚拟机尝试安装了最近特别火的国产系统<code>deepin</code>，特此记录。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">VMware Workstation Pro 15</span><br><span class="line">Deepin 20</span><br></pre></td></tr></table></figure><p>环境与博主不同也没有太大关系，只是在遇到问题的时候可以<strong>往这方面考虑</strong>。但是VMware是必须要装好的，非常重要。</p><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>首先，在<a href="https://www.deepin.org/zh/download/">deepin官网</a>上面下载好最新版本的<code>deepin</code>映像文件。</p><p><img src="https://z3.ax1x.com/2021/05/21/gHLVeJ.png"></p><blockquote><p>如果速度慢可以尝试用cdn</p></blockquote><h2 id="开始使用虚拟机"><a href="#开始使用虚拟机" class="headerlink" title="开始使用虚拟机"></a>开始使用虚拟机</h2><p>打开<code>VMware</code>虚拟机软件，点击首页的<strong>“新建虚拟机”</strong>按钮。点击<strong>“典型”</strong>，然后直接点击下一步，直到这个页面，选择之前的映像文件。</p><p><img src="https://z3.ax1x.com/2021/05/21/gHXfLF.png"></p><p>继续点击下一步，剩下的内容可以自己修改，点击下一步，到这个页面，磁盘大小改成64GB。</p><blockquote><p>  注意，这里非常重要。</p><p>  如果没有改，后面会出问题。</p></blockquote><p><img src="https://z3.ax1x.com/2021/05/21/gHjiSP.png"></p><p>接下来点击下一步，安装好虚拟机。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>开启虚拟机之后，稍作等待，会看到这样的界面。</p><p><img src="https://pic2.zhimg.com/80/v2-42c3214934719c404eadbcb81f9c7b37_1440w.png"></p><p>接下点一直按照默认的点下一步，不过要注意，到选择<strong>硬盘分区</strong>的地方，点击<strong>全盘安装</strong>，然后选择、下一步，系统就自动开始安装了。</p><h2 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h2><p>经过一段时间的等待，就安装完成了，界面如下，还是十分好看的。</p><p><img src="https://img0.baidu.com/it/u=1039656403,884888237&fm=26&fmt=auto&gp=0.jpg"></p><p>看到这个界面，就说明安装完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepin </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用体验</title>
      <link href="/2021/04/18/git_try/"/>
      <url>/2021/04/18/git_try/</url>
      
        <content type="html"><![CDATA[<p>原来还是个小白的时候（当然<em>现在还是</em>），我用的一直是<code>github desktop</code>。如今尝试着使用<code>git</code>，特此记录。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git的安装比较简单，进入Git官网的<a href="https://git-scm.com/download/win">Windows下载地址</a>，安装包就开始自动下载了。</p><p>打开exe，按照默认选项安装即可。</p><p>完成后在开始菜单里打开Git Bash，弹出一个跟cmd类似的窗口，说明安装成功。</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p><strong>首先要配置的名字和Email地址</strong>，以后每次进行git操作时才能有据可查。打开Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &#x27;your_name&#x27;</span><br><span class="line">$ git config --global user.email &#x27;your_email&#x27;</span><br></pre></td></tr></table></figure><p><strong>接下来我们需要创建版本库</strong>，这个仓库中的文件Git会进行跟踪，以便日后的数据备份和还原。</p><p>随便找一个位置，创建一个文件夹<code>test</code>作为版本库目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test</span><br></pre></td></tr></table></figure><p>进入刚创建文件夹的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd git_repo</span><br></pre></td></tr></table></figure><p>再输入指令<code>git init</code>初始化Git，告诉Git这里是一个版本库了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>这样就建好了一个空的仓库了。</p><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>在git_repo目录中创建一个test.txt，内容随意。<br>在bash中输入命令告诉Git需要追踪的文件，<code>.</code>表示所有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><p>再用命令进行提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;test&quot;</span><br></pre></td></tr></table></figure><p>如果bash打印出下面的文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[master 5e04f34] test git</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode xxx xxx</span><br></pre></td></tr></table></figure><p>说明版本库已经顺利运行起来了。</p><h2 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h2><p>首先还是打开Git Bash，<strong>创建SSH Key</strong>，用于Git和GitHub之间的SSH加密传输：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &#x27;your_email&#x27;</span><br></pre></td></tr></table></figure><p>回车后提示输入<code>passphrase</code>，类似于密码，每次于GitHub通信时都会要求输入。</p><p><code>passphrase</code>也可以不用设置，一路回车就好。</p><p>完成后会在用户目录里生成.ssh目录，比如说我的在<code>C:\Users\dusai\.ssh</code>，里面包含<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p><p>接下来<strong>登录GitHub账号</strong>，在<code>account/settings</code>中找到<code>SSH and GPG keys</code>，点击<code>NEW SSH key</code>；其中的<code>Title</code>文本框请随便填，<code>Key</code>文本框填入<code>id_rsa.pub</code>中的内容。点击<code>Add SSH key</code>，就完成了SSH key 的添加。</p><p><img src="D:\img\git2.jpg" alt="img"></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p><strong>首先创建版本库。</strong>点击GitHub导航栏里的<code>New repository</code>：</p><p><img src="D:\img\git4.jpg" alt="img"></p><p>在<code>Repository name</code>中输入库名称。这里因为是我的<a href="http://www.dusaiphoto.com/article/article-detail/2/">Django搭建博客教程</a>的库，因此输入<code>django_blog_tutorial</code>。</p><p><img src="D:\img\git2_uYxRjes.jpg" alt="img"></p><p>写完后点击<code>Create repository</code>，远程版本库就生成了。</p><p>进入库的主页，点击SSH，后面的就是远程库的地址：</p><p><img src="D:\img\git3.jpg" alt="img"></p><p>根据页面的提示，进入本地刚才创建的库目录<code>git_repo</code>，将本地的Git库和远程仓库关联起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:stacklens/django_blog_tutorial.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>bash中打印出如下字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 281 bytes | 140.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:stacklens/django_blog_tutorial.git</span><br><span class="line">   848cc16..5e04f34  master -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure><p>则表示本地Git已经顺利连接上了GitHub远程仓库。</p><p>以后每次需要提交代码到GitHub时，<strong>进入到git仓库文件夹，</strong>执行下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 提交当前目录下所以文件</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 提交记录说明 </span><br><span class="line">$ git commit -m &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line"># 提交到github</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p><strong>注意：本文部分内容转载自<a href="https://www.dusaiphoto.com/article/13/">杜塞的个人网站</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdm包管理器</title>
      <link href="/2021/04/17/pdm-tui-jian/"/>
      <url>/2021/04/17/pdm-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>在<code>python</code>项目的开发之中，<strong>虚拟环境</strong>是必不可少的部分。</p><p>以下是它的部分<strong>问题</strong>：</p><ul><li>对于新手来说，虚拟环境的工作方式<strong>令人困惑</strong></li><li>不同的平台需要<strong>不同的</strong>命令集来激活虚拟环境</li><li>你需要在<strong>每个</strong>终端中都激活虚拟环境</li><li><strong>多个</strong>虚拟环境嵌套的使用体验不佳</li></ul><p>针对这些问题，本文介绍的 Python 包管理器： <a href="https://github.com/pdm-project/pdm">PDM - Python Development Master</a> ，提供了一个将 Python 解释器和项目开发环境解耦的新途径。</p><p>以下是 PDM 的<strong>特点</strong>：</p><ul><li>不依赖虚拟环境。</li><li>简单且快速的依赖解析器</li><li>完备的插件系统</li></ul><p>PDM 使用起来非常轻松，接下来让我们尝试一下。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>首先安装PDM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install pdm</span><br></pre></td></tr></table></figure><p>以django为例，创建一个项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir django</span><br><span class="line">&gt; cd django</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pdm init</span><br></pre></td></tr></table></figure><p>一下是一些常用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; pdm add django #安装库</span><br><span class="line">&gt; pdm run python manage.py runserver #运行命令</span><br><span class="line">&gt; pdm list #显示列表</span><br></pre></td></tr></table></figure><h2 id="PDM创建者"><a href="#PDM创建者" class="headerlink" title="PDM创建者"></a>PDM创建者</h2><p>PDM创建者 <a href="https://github.com/frostming">Frost Ming</a>，Python 开源爱好者，坐标深圳。<code>Pycon</code> 讲师，<code>pipenv</code> 核心贡献者。活跃于各大社交平台，帮助众多 Python 患者解决各类疑难杂症。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pdm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习：Day05 if条件</title>
      <link href="/2021/03/06/java-day5/"/>
      <url>/2021/03/06/java-day5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 引入输入模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输入年龄</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;可以骑车&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (age &gt; <span class="number">16</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;可以骑电动车&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不可以骑车&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> if </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习：Day04 数组操作与输入输出</title>
      <link href="/2021/03/06/java-day4/"/>
      <url>/2021/03/06/java-day4/</url>
      
        <content type="html"><![CDATA[<p><strong>今日代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 引入输入模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*数组操作*/</span> </span><br><span class="line">        String[] a = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]; <span class="comment">// 定义一个长度为3的字符串数组</span></span><br><span class="line">        a[<span class="number">0</span>] = <span class="string">&quot;mum&quot;</span>; <span class="comment">// 第一个</span></span><br><span class="line">        a[<span class="number">1</span>] = <span class="string">&quot;dad&quot;</span>; <span class="comment">// 第二个</span></span><br><span class="line">        a[<span class="number">2</span>] = <span class="string">&quot;me&quot;</span>; <span class="comment">// 第三个</span></span><br><span class="line">        System.out.println(a[<span class="number">2</span>]); <span class="comment">// 打印出索引为二对应的字符</span></span><br><span class="line">        System.out.println(a.length); <span class="comment">// 打印数组长度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*输入输出*/</span> </span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span> + <span class="string">&quot;世界&quot;</span>); <span class="comment">// 输出</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">// 创建一个输出</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入英文名：&quot;</span>); <span class="comment">// 提示词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine(); <span class="comment">// 读取输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好,&quot;</span> + name); <span class="comment">// 打印输入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数组 </tag>
            
            <tag> 输入 </tag>
            
            <tag> 输出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习：Day03 整数和布尔运算</title>
      <link href="/2021/03/06/java-day3/"/>
      <url>/2021/03/06/java-day3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 整数运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 数字一</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">25</span>; <span class="comment">// 数字二</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num_p</span> <span class="operator">=</span> n1 + n2; <span class="comment">// 加法计算结果</span></span><br><span class="line">        System.out.println(num_p); <span class="comment">// 打印结果</span></span><br><span class="line">        <span class="comment">// 布尔运算（primary student的定义: 6~12岁）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">15</span>; <span class="comment">// 定义年龄</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPrimaryStudent</span> <span class="operator">=</span> age &gt; <span class="number">6</span> &amp;&amp; age &lt; <span class="number">12</span>; <span class="comment">// 设定条件</span></span><br><span class="line">        System.out.println(isPrimaryStudent ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>); <span class="comment">// 是或否的打印内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天是</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习：Day02 变量与数据类型</title>
      <link href="/2021/03/06/java-day2/"/>
      <url>/2021/03/06/java-day2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// int整数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;Hello Guy&quot;</span>; <span class="comment">// String字符串</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3.14159f</span>; <span class="comment">// float浮点型</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">18</span> &lt; a; <span class="comment">// boolean布尔值（F）</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>; <span class="comment">// char单字符</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> a &lt; <span class="number">18</span>; <span class="comment">// boolean布尔值（T)</span></span><br><span class="line">        <span class="comment">// 打印变量</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些就是今天的代码，以后都不会文字讲解，都会写在注释里面的</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 变量与数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习：Day01 Hello World</title>
      <link href="/2021/03/06/java-day1/"/>
      <url>/2021/03/06/java-day1/</url>
      
        <content type="html"><![CDATA[<p>好久没有更新教程了，这次开始学习一门新的语言，<code>Java</code>。</p><p>这一次，会贴出每一天的代码，并带上<strong>注释与讲解</strong>，读者自己敲，自己理解，自己学习。</p><p>闲话少说，开始吧！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天，主要带大家了解代码结构，接下来请看分解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">d1</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是每一个文件中都会出现的内容，定义一个类</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这行代码是用于定义类中的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="comment">// 这行代码是在命令行打印文字</span></span><br></pre></td></tr></table></figure><p>这些就是Java中最基础的代码，以后的编程都将再次基础上继续进行。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门游戏：比大小</title>
      <link href="/2020/11/21/bi-da-xiao/"/>
      <url>/2020/11/21/bi-da-xiao/</url>
      
        <content type="html"><![CDATA[<p>简单的比大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比大小</span></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line">computer = random.randrange(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择一个一百以内的数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> user &gt;= <span class="number">0</span> <span class="keyword">or</span> user &lt; <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> user &gt; computer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你胜利啦！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user &lt; computer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我胜利啦！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;违反规则！&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/media/editor/%E6%97%A0%E6%A0%87%E9%A2%98_20201127140415985932.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>樱花树</title>
      <link href="/2020/10/06/yin-hua-shu/"/>
      <url>/2020/10/06/yin-hua-shu/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 画樱花的躯干(60,t)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">branchLen,t</span>):</span><br><span class="line">    sleep(<span class="number">0.0005</span>)</span><br><span class="line">    <span class="keyword">if</span> branchLen &gt;<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">8</span>&lt;= branchLen &lt;=<span class="number">12</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>,<span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;snow&#x27;</span>) <span class="comment"># 白</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;lightcoral&#x27;</span>) <span class="comment"># 淡珊瑚色</span></span><br><span class="line">            t.pensize(branchLen / <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> branchLen &lt;<span class="number">8</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>,<span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;snow&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;lightcoral&#x27;</span>) <span class="comment"># 淡珊瑚色</span></span><br><span class="line">            t.pensize(branchLen / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t.color(<span class="string">&#x27;sienna&#x27;</span>) <span class="comment"># 赭(zhě)色</span></span><br><span class="line">            t.pensize(branchLen / <span class="number">10</span>) <span class="comment"># 6</span></span><br><span class="line">        t.forward(branchLen)</span><br><span class="line">        a = <span class="number">1.5</span> * random.random()</span><br><span class="line">        t.right(<span class="number">20</span>*a)</span><br><span class="line">        b = <span class="number">1.5</span> * random.random()</span><br><span class="line">        tree(branchLen-<span class="number">10</span>*b, t)</span><br><span class="line">        t.left(<span class="number">40</span>*a)</span><br><span class="line">        tree(branchLen-<span class="number">10</span>*b, t)</span><br><span class="line">        t.right(<span class="number">20</span>*a)</span><br><span class="line">        t.up()</span><br><span class="line">        t.backward(branchLen)</span><br><span class="line">        t.down()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 掉落的花瓣</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">petal</span>(<span class="params">m, t</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        a = <span class="number">200</span> - <span class="number">400</span> * random.random()</span><br><span class="line">        b = <span class="number">10</span> - <span class="number">20</span> * random.random()</span><br><span class="line">        t.up()</span><br><span class="line">        t.forward(b)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">        t.forward(a)</span><br><span class="line">        t.down()</span><br><span class="line">        t.color(<span class="string">&#x27;lightcoral&#x27;</span>) <span class="comment"># 淡珊瑚色</span></span><br><span class="line">        t.circle(<span class="number">1</span>)</span><br><span class="line">        t.up()</span><br><span class="line">        t.backward(a)</span><br><span class="line">        t.right(<span class="number">90</span>)</span><br><span class="line">        t.backward(b)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 绘图区域</span></span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    <span class="comment"># 画布大小</span></span><br><span class="line">    w = turtle.Screen()</span><br><span class="line">    t.hideturtle() <span class="comment"># 隐藏画笔</span></span><br><span class="line">    getscreen().tracer(<span class="number">5</span>,<span class="number">0</span>)</span><br><span class="line">    w.screensize(bg=<span class="string">&#x27;wheat&#x27;</span>) <span class="comment"># wheat小麦</span></span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">    t.up()</span><br><span class="line">    t.backward(<span class="number">150</span>)</span><br><span class="line">    t.down()</span><br><span class="line">    t.color(<span class="string">&#x27;sienna&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 画樱花的躯干</span></span><br><span class="line">    tree(<span class="number">60</span>,t)</span><br><span class="line">    <span class="comment"># 掉落的花瓣</span></span><br><span class="line">    petal(<span class="number">200</span>, t)</span><br><span class="line">    w.exitonclick()</span><br><span class="line"> </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 樱花树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署的思考</title>
      <link href="/2020/09/01/bu-shu-si-kao/"/>
      <url>/2020/09/01/bu-shu-si-kao/</url>
      
        <content type="html"><![CDATA[<p>最近想着怎么才能<strong>部署前后端分离的项目</strong>，可算想出了一点头绪。</p><ol><li><strong>后端</strong>：使用<code>docker</code>半容器化部署，另外申请一个api的二级域名</li><li><strong>前端</strong>：有点粗暴的方案（因为用docker部署不太方便），使用<code>Nginx</code>直接部署</li><li><strong>遗憾</strong>：本来想借此完全的尝试容器化部署的，看来还是用自己习惯的吧</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程:首页美化一</title>
      <link href="/2020/08/17/drf-vue-home-meihua-1/"/>
      <url>/2020/08/17/drf-vue-home-meihua-1/</url>
      
        <content type="html"><![CDATA[<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><blockquote><p>组件化概念：<br>把重复的代码提取出来合并成为一个个组件，组件最重要的就是重用（复用），位于框架最底层，其他功能都依赖于组件，可供不同功能使用，独立性强，方便维护。</p></blockquote><p>既然有这么多好处，我们就开始行动吧！<br>首页的文章列表并不会涉及到这么多优点，但是为了统一，我们还是要进行文章列表的组件化。</p><p>第一步，我们把原来<code>frontend/src/views/Home.vue</code>修改成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--frontend/src/views/Home.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--div v-for=&quot;article in articles&quot; :key=&quot;article.id&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;h3&gt;&#123;&#123; article.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">    &#123;&#123; article.main &#125;&#125;</span></span><br><span class="line"><span class="comment">    &lt;hr&gt;</span></span><br><span class="line"><span class="comment">&lt;/div--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">articles</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*methods: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        getArticles () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            axios.get(&#x27;http://127.0.0.1:8000/api/articles/&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            .then(this.getArticlesSucc)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        getArticlesSucc (res) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            this.articles = res.data</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    mounted () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        this.getArticles()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;,*/</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，我们把<strong>前两章的获取文章列表的代码</strong>注释掉了。<br>第二步，我们在<code>frontend/src/compoments</code>目录下创建<code>ArticleList.vue</code>文件。</p><blockquote><p>这里再一次提醒读者，在第一章搭建项目目录的时候必须是<code>cnpm install -g @vue/cli</code>，也就是安装了<strong>vue-cli4</strong>，否则到时候会前功尽弃。</p></blockquote><p>第三步，我们把<code>frontend/src/views/Home.vue</code>改成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--frontend/src/views/Home.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ArticleList</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import HelloWorld from &#x27;@/components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ArticleList</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/ArticleList.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ArticleList</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这里我们<em>简单粗爆</em>的根据例子引入了组件。<br>第四部，我们把之前的代码写入到<code>frontend/src/compoments/ArticleList.vue</code>文件里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--frontend/src/compoments/ArticleList.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;article in articles&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;article.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &#123;&#123; article.main &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;ArticleList&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">articles</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        getArticles () &#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/api/articles/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">getArticlesSucc</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        getArticlesSucc (res) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">articles</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">getArticles</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次刷新页面，正常情况下就可以看到和原来一样的界面啦！</p><h2 id="美化文章列表"><a href="#美化文章列表" class="headerlink" title="美化文章列表"></a>美化文章列表</h2><p>我们原来的文章列表是<strong>十分简陋的</strong>，所以，我们要对他进行拓展。这是我们第一次做美化，在此推荐一个从<code>react</code>上面移植过来的库，叫做<code>ant-design-vue</code>，安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install ant-design-vue</span><br></pre></td></tr></table></figure><p>这里博主直接把我自己的代码放出来了，很乱，里面也包含了<code>svg图标</code>，后面会逐一讲述，这里暂时没有新的知识点，所以直接放代码啦：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;article in articles&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;article.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文章循环里面的卡片--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-card</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="comment">&lt;!--位置在左侧--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文章标题，包含导航--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span> <span class="attr">style</span>=<span class="string">&quot;font-weight:bold&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;&#x27;#/article/detail/&#x27;+ article.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: black;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;article.course&quot;</span>&gt;</span>&#123;&#123; article.course &#125;&#125;:&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: black;&quot;</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文章meta--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;article.column&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>&#123;&#123; article.column &#125;&#125;<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;tag in article.tags&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a-tag</span> <span class="attr">color</span>=<span class="string">&quot;#108ee9&quot;</span>&gt;</span>&#123;&#123; tag &#125;&#125;<span class="tag">&lt;/<span class="name">a-tag</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--svg图标构成的meta，图标很乱，请忽略--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1596876003462&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3872&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span> <span class="attr">height</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M884.5 754.12c7.45-14.9 14.9-26.07 22.35-41 3.72-3.72 3.72-7.45 3.72-11.18 3.73-11.17 11.18-22.35 14.9-33.52 3.73-3.72 3.73-7.45 3.73-14.9 3.73-11.18 7.45-22.35 11.18-29.8 0-3.72 3.72-11.17 3.72-14.9 3.73-11.17 3.73-22.35 7.45-33.53 0-3.72 3.73-11.17 3.73-14.89C959 545.53 959 526.9 959 512c0-245.85-201.15-447-447-447S65 266.15 65 512c0 14.9 0 33.53 3.73 48.43 0 3.72 0 11.17 3.72 14.89 0 11.18 3.73 22.36 3.73 33.53 0 3.73 3.72 11.18 3.72 14.9 3.73 11.17 7.45 22.35 11.18 29.8 0 3.73 3.72 7.45 3.72 14.9 3.73 11.17 7.45 22.35 14.9 33.52 0 3.73 3.73 7.46 3.73 11.18 7.45 14.9 14.89 26.07 22.34 41C214 877.05 351.82 959 508.28 959s294.27-82 376.22-204.88z m-376.22-476.8c89.4 0 163.9 74.5 163.9 163.91s-74.5 163.9-163.9 163.9-163.9-74.51-163.9-163.9 74.5-163.91 163.9-163.91zM236.35 791.38c48.43-108 152.73-178.8 271.93-178.8s223.5 70.77 271.92 178.8c-70.77 67-167.62 111.74-271.92 111.74-104.28-3.72-201.15-44.7-271.93-111.74z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#398885&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3873&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="symbol">&amp;nbsp;</span>&#123;&#123; article.author &#125;&#125;</span><br><span class="line">                <span class="symbol">&amp;nbsp;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1596876286076&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5391&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span> <span class="attr">height</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 42.666667c259.2 0 469.333333 210.133333 469.333333 469.333333s-210.133333 469.333333-469.333333 469.333333S42.666667 771.2 42.666667 512 252.8 42.666667 512 42.666667z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFEEEE&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5392&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 128a384 384 0 1 0 0 768 384 384 0 0 0 0-768z m0-85.333333c259.2 0 469.333333 210.133333 469.333333 469.333333s-210.133333 469.333333-469.333333 469.333333S42.666667 771.2 42.666667 512 252.8 42.666667 512 42.666667z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E73131&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5393&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M426.666667 256h85.333333v384h-85.333333z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E62C2C&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5394&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M726.101333 554.837333v85.333334h-298.666666v-85.333334z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E62C2C&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5395&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="symbol">&amp;nbsp;</span>&#123;&#123; article.created &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;article.course&quot;</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;nbsp;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1597402885594&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;2878&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span> <span class="attr">height</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0 0m102.4 0l819.2 0q102.4 0 102.4 102.4l0 819.2q0 102.4-102.4 102.4l-819.2 0q-102.4 0-102.4-102.4l0-819.2q0-102.4 102.4-102.4Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#51CF70&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;2879&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 512L340.992 438.272 161.792 512V0H512v512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#D7FF3E&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;2880&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;nbsp;</span>&#123;&#123; article.course &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--文章概览--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: grey&quot;</span>&gt;</span>&#123;&#123; article.main &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-card</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import HelloWorld from &#x27;@/components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;ArticleList&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">articles</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        getArticles () &#123; <span class="comment">// 获取文章列表</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/api/articles/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">getArticlesSucc</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        getArticlesSucc (res) &#123; <span class="comment">// 赋值文章列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">articles</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">getArticles</span>() <span class="comment">// 实际执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>会css的读者可以反馈一些意见，也可以自己定制</li><li>这里用到了很多<code>ant-design-vue</code>的样式，比如说卡片，按钮徽章等等，附上文档：<a href="https://antdv.com/">https://antdv.com</a></li></ol></blockquote><p>如果完全按照博主的做，效果如下：<br><img src="https://gitee.com/jackyfzh/imgs_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2020/8/23/1598189512047.png" alt="文章列表"></p><p>好了，这里先讲这些，后面还会进一步<strong>构建导航栏，侧边栏</strong>等等，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> vue </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程:vue基础学习</title>
      <link href="/2020/08/12/drf-vue-vue-jichu/"/>
      <url>/2020/08/12/drf-vue-vue-jichu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章专为新手准备，内容比较基础，大神请转弯<br>这篇文章参考自<a href="https://cn.vuejs.org/">vue官方文档</a>，由于文档内容较多，而本教程涉及内容不多，所以在此精简，长期学习的读者建议去官方文档</p></blockquote><p><code>vue</code>是一款渐进式JavaScript框架，支持组件化，可以使用<code>vue-cli</code>创建大型项目。</p><h2 id="vue文件的大体结构"><a href="#vue文件的大体结构" class="headerlink" title="vue文件的大体结构"></a>vue文件的大体结构</h2><p>vue文件大多风为<code>html</code>和<code>JavaScript</code>两个部分，<code>html</code>部分被称为<code>模板</code>，<code>JavaScript</code>部分通常长这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// HelloWorld</span></span><br><span class="line">    <span class="title class_">ArticleList</span>,</span><br><span class="line">    <span class="title class_">Banner</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，第一个是普通的app（APP.vue），第二个是组件化。</p><h2 id="vue的组件化"><a href="#vue的组件化" class="headerlink" title="vue的组件化"></a>vue的组件化</h2><p>组件化指的是<strong>将项目的每个组件分在几个文件里面</strong>，可以起到<em>提高项目可读性</em>和<em>方便修改项目的作用</em>。后面的教程中会用实践的方式让大家明白如何使用组件化。<br><img src="https://cn.vuejs.org/images/components.png" alt="组件化"></p><h2 id="vue的模板语法"><a href="#vue的模板语法" class="headerlink" title="vue的模板语法"></a>vue的模板语法</h2><p>vue的模板不仅有和html一样的语法，还有特定的模板语法。</p><blockquote><p>以下内容复制自vue官方文档<br>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。<br>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。<br>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>vue中可以调用在JavaScript中定义的所有变量，语法像这样用大括号表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据：&#123;&#123; data &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这里，v-if 指令将根据表达式 seen 的值的真假来插入&#x2F;移除 <p> 元素。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，v-bind 指令可以用于响应式地更新 HTML attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在这里 href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定。</p><p>另一个例子是 v-on 指令，它用于监听 DOM 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在这里参数是监听的事件名。</p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><ol><li><code>v-bind</code>缩写：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><code>v-on</code>缩写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这样，大家就可以对基础概念语法有一定了解了。</p><blockquote><p>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 基础 </tag>
            
            <tag> 新手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程:前后端联调实现简陋的文章列表</title>
      <link href="/2020/08/09/drf-vue-article-list-easy-axios/"/>
      <url>/2020/08/09/drf-vue-article-list-easy-axios/</url>
      
        <content type="html"><![CDATA[<p>这篇文章将教大家<strong>使用axios获取简单地文章列表</strong>，让我们开始吧！</p><h2 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h2><p>由于网站的安全机制，通常需要遵循同源策略，即协议、域名、端口三者都相同。然而，在前后端分离的项目中（本地环境）是无法实现同源的，所以就需要在后端中配置。</p><ol><li>首先，进入虚拟环境，安装跨域配置的库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django-cors-headers</span><br></pre></td></tr></table></figure></li><li>接着，在<code>settings.py</code>中配置：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line"><span class="string">&#x27;corsheaders&#x27;</span> <span class="comment"># 新增</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>, <span class="comment"># 需注意与其他中间件顺序，这里放在最前面即可</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持跨域配置开始</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span> </span><br></pre></td></tr></table></figure>到此，后端部分搞定。</li></ol><h2 id="前端请求数据"><a href="#前端请求数据" class="headerlink" title="前端请求数据"></a>前端请求数据</h2><p>首先，命令行安装<code>axios</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios</span><br></pre></td></tr></table></figure><p>接着在前端的<code>Home.vue</code>里写入（JavaScript部分）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">...</span><br><span class="line">data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            articles: &#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getArticles () &#123;</span><br><span class="line">            axios.get(&#x27;http://127.0.0.1:8000/api/articles/&#x27;)</span><br><span class="line">            .then(this.getArticlesSucc)</span><br><span class="line">        &#125;,</span><br><span class="line">        getArticlesSucc (res) &#123;</span><br><span class="line">            this.articles = res.data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        this.getArticles()</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>需要注意，这里是<strong>两个script标签中的JavaScript部分，并且前面还省略了一段内容</strong>，完整js部分内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            articles: &#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getArticles () &#123;</span><br><span class="line">            axios.get(&#x27;http://127.0.0.1:8000/api/articles/&#x27;)</span><br><span class="line">            .then(this.getArticlesSucc)</span><br><span class="line">        &#125;,</span><br><span class="line">        getArticlesSucc (res) &#123;</span><br><span class="line">            this.articles = res.data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        this.getArticles()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这一部分很有难度，如果读者运行后报错，或者看不懂代码，建议移步至<a href="https://cn.vuejs.org/">vue官方文档</a>和<a href="http://www.axios-js.com/">axios官方文档</a>，进一步学习。</p></blockquote><p>好了，说说这里我们干了什么。</p><ol><li>我们通过axios从<strong>后端</strong>获取了数据</li><li>我们定义了获取数据的函数</li><li>我们将数据储存在了<code>articles</code>变量中，方便在模板里使用</li></ol><p>接下来让我们测试一下。</p><ol><li>重启前端项目，启动后端项目</li><li>访问<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></li><li>不要看节目，输入快捷键：<kbd>Ctrul</kbd>+<kbd>shift</kbd>+<kbd>i</kbd>，打开开发者工具（俗称f12），打开控制台，检查有没有报错。<strong>如果没有，那么恭喜你，数据获取成功啦！</strong></li></ol><h2 id="文章界面"><a href="#文章界面" class="headerlink" title="文章界面"></a>文章界面</h2><p>接下来，我们开始编写文章列表界面，将数据运用在界面中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-for=&quot;article in articles&quot; :key=&quot;article.id&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; article.title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &#123;&#123; article.main &#125;&#125;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里只是实现了一个十分简单的列表，其他字段都没有写在页面中，也没有做任何美化，在后面的文章中会实现更复杂的列表。</p></blockquote><ol><li><code>v-for</code>：循环，将数据生成一个列表</li><li><code>&#123;&#123; article.title &#125;&#125;</code>：文章的标题，<code>json</code>数据里面的一部分</li></ol><p>重启项目，入过没有任何错误，会展示出简单的文章列表。</p><h2 id="错误的排查"><a href="#错误的排查" class="headerlink" title="错误的排查"></a>错误的排查</h2><p>然而，一切总不会这么顺利，很可能无法展示出文章列表，这里说说可能有哪些错误。</p><h3 id="后端api问题"><a href="#后端api问题" class="headerlink" title="后端api问题"></a>后端api问题</h3><p>首先，我们就要检查后端的api里面是否有数据，如果没有数据，前端岂能获得数据？如果没有数据，就要检查项目是否启动，序列化，模型和视图是否正确等等。</p><h3 id="前端axios问题"><a href="#前端axios问题" class="headerlink" title="前端axios问题"></a>前端axios问题</h3><p>接着，让我们用<kbd>Ctrul</kbd>+<kbd>shift</kbd>+<kbd>i</kbd>快捷键打开开发者工具–&gt;控制台，查看是否有报错，有报错就要检查前端代码。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>博主说：本章内容最难，最有挑战性，最关键，最容易出错，你需要参考各类文档，博主后续也会专门写一篇文章，为大家讲解vue的基础，通读文档是很重要的！</p><blockquote><p>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
            <tag> 前后端联调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用markdown写作</title>
      <link href="/2020/08/08/use-markdown-write/"/>
      <url>/2020/08/08/use-markdown-write/</url>
      
        <content type="html"><![CDATA[<p>相信大家一定<strong>都十分享受使用markdown写作</strong>，markdown是一种轻量级的标记语言，致力于让写作者专注的写作而不必注意排版，这里教大家<em>使用markdown编辑器并同步到印象笔记</em>，也作为我自己的笔记。</p><p>这里就不讲述markdown语法了，可以参考<a href="https://www.jianshu.com/p/191d1e21f7ed/">这篇文章</a>，markdown语法很简单，上手较快。</p><h2 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h2><p>首先，大家必须在官网或者引用商店中下载<strong>电脑版印象笔记</strong>，下载成功后，登录或注册，可以看到如下界面：<br><img src="https://s1.ax1x.com/2020/08/07/ahD0YR.png" alt="印象笔记界面"></p><h2 id="小书匠"><a href="#小书匠" class="headerlink" title="小书匠"></a>小书匠</h2><p>然后，输入网址：<a href="http://markdown.xiaoshujiang.com/">http://markdown.xiaoshujiang.com/</a><br>即可进入小书匠编辑器网页版。<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596883796904&di=01feb86dfa6486ab06178fee615266dc&imgtype=0&src=http://pic.9upk.com/soft/UploadPic/Upload/Fl201607121052236024.PNG" alt="小书匠"></p><h2 id="小书匠连接印象笔记"><a href="#小书匠连接印象笔记" class="headerlink" title="小书匠连接印象笔记"></a>小书匠连接印象笔记</h2><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>点击<strong>小书匠网页版左上角的徽标</strong>，就可以进入小书匠主页。然后，点击从上往下数第五个图标（<em>绑定</em>）。会跳出这样的页面：<br><img src="https://gitee.com/jackyfzh/imgs_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2020/8/9/%E5%B0%8F%E4%B9%A6%E5%8C%A0%E7%BB%91%E5%AE%9A%E7%95%8C%E9%9D%A2.png" alt="小书匠绑定界面"><br>博主这里已经绑定好了，进入这个界面后，点击”数据储存–&gt;印象笔记“按钮，会跳出一个提示框，在框中输入你的注册邮箱和密码，授权后点击<strong>印象笔记边上的勾</strong>，然后点击”确定“按钮，就可以绑定印象笔记啦。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来讲讲怎么使用。<br>点击确认键后，再次点击页面中央的“笔记本”，可以直接在印象笔记文件夹下面新建文章，保存就行了，也可以另存为。<br><img src="https://gitee.com/jackyfzh/imgs_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2020/8/9/1596973562316.png" alt="目录"></p><h2 id="小书匠使用Gitee码云图床"><a href="#小书匠使用Gitee码云图床" class="headerlink" title="小书匠使用Gitee码云图床"></a>小书匠使用Gitee码云图床</h2><p>小书匠支持很多图床，这里我们配置码云图床。<br>首先，一定要注册<strong>码云账号</strong>（<a href="https://gitee.com)./">https://gitee.com)。</a><br>第二步，进入之前说的<strong>小书匠绑定界面</strong>，翻到下面的<strong>图床服务</strong>，选择码云图床，会跳出来一个窗口，：<br><img src="https://gitee.com/jackyfzh/imgs_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2020/8/9/1596973915805.png" alt="图床服务页面"></p><ol><li>token：按照提示进入链接申请</li><li>在gitee中新建仓库，名为<strong>imgs_bed</strong>，在仓库名称中填入<strong>imgs_bed</strong></li><li>分支和域名不需要改变</li><li>文件名称生成规则可以按自己的需求修改</li></ol><p>然后点击确定，回到绑定页面，勾选码云图床，点击右下角确定，直接复制图片到编辑框或上传图片，就会默认上传到码云仓库了。</p><blockquote><p>博主本来选用的是github图床，但是经常会有图裂的情况，所以改用码云图床了</p></blockquote><p>一切就绪，赶快试试吧！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 小书匠 </tag>
            
            <tag> 印象笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf + vue全栈教程：后端拓展</title>
      <link href="/2020/08/07/drf-vue-backend-tuozhan/"/>
      <url>/2020/08/07/drf-vue-backend-tuozhan/</url>
      
        <content type="html"><![CDATA[<p>原来我们的模型是有些简陋的，这一讲我们将文章模型拓展一下。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先，我们安装一个为方便复杂序列化的插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install drf-flex-fields</span><br></pre></td></tr></table></figure><h2 id="拓展模型"><a href="#拓展模型" class="headerlink" title="拓展模型"></a>拓展模型</h2><p>首先，我们在顶部引入django的<code>User</code>模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User <span class="comment"># 顶部新增</span></span><br></pre></td></tr></table></figure><p>接着，新增<code>标签</code>，<code>栏目</code>两个拓展模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Column</span>(models.Model): <span class="comment"># Column类，栏目</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, unique=<span class="literal">True</span>) <span class="comment"># 短字段，最多50字，unique代表唯一</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>: <span class="comment"># 内部类</span></span><br><span class="line">        verbose_name = <span class="string">&quot;栏目 Column&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): <span class="comment"># 后台返回内容</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model): <span class="comment"># 同上，不在阐述</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&quot;标签 Tag&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>这两个模型是<code>Article模型</code>的外键，接下来拓展Article模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    main = models.CharField(max_length=<span class="number">10000</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    column = models.ForeignKey( <span class="comment"># 栏目外键，新增</span></span><br><span class="line">        Column, </span><br><span class="line">        related_name=<span class="string">&#x27;articles&#x27;</span>, </span><br><span class="line">        on_delete=models.CASCADE, </span><br><span class="line">        blank=<span class="literal">True</span>, </span><br><span class="line">        null=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    tags = models.ManyToManyField(Tag, blank=<span class="literal">True</span>) <span class="comment"># 标签外键，新增</span></span><br><span class="line">    views = models.PositiveIntegerField(default=<span class="number">0</span>, editable=<span class="literal">False</span>) <span class="comment"># 浏览量，新增</span></span><br><span class="line">    course = models.CharField(max_length=<span class="number">500</span>, blank=<span class="literal">True</span>) <span class="comment"># 属于某课程，新增</span></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = (<span class="string">&#x27;-created&#x27;</span>,)</span><br><span class="line">        verbose_name = <span class="string">&quot;文章 Article&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>模型修改完后记得迁移，<strong>否则不会生效</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="拓展序列化器"><a href="#拓展序列化器" class="headerlink" title="拓展序列化器"></a>拓展序列化器</h2><p>这里不是特别重要，都写在注释里了，将整个文件都贴出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/serialiezer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> rest_flex_fields <span class="keyword">import</span> FlexFieldsModelSerializer <span class="comment"># 文章开头安装的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializer</span>(<span class="title class_ inherited__">FlexFieldsModelSerializer</span>): <span class="comment"># 继承要修改</span></span><br><span class="line">    author = serializers.ReadOnlyField(source=<span class="string">&#x27;author.username&#x27;</span>) <span class="comment"># 作者</span></span><br><span class="line">    column = serializers.StringRelatedField() <span class="comment"># 栏目</span></span><br><span class="line">    tags = serializers.StringRelatedField(many=<span class="literal">True</span>) <span class="comment"># 标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Article</span><br><span class="line">        <span class="comment"># 这个有简便写法，博主保险起见就这么写，感兴趣的读者可以自行查阅</span></span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;column&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;course&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;updated&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>视图这里只需要在文章详情的地方改就行了，代码全贴出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, mixins</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleViewSet</span>(mixins.ListModelMixin, <span class="comment"># 列表</span></span><br><span class="line">                     mixins.RetrieveModelMixin, <span class="comment"># 详情</span></span><br><span class="line">                     viewsets.GenericViewSet <span class="comment"># 杂散的其他类</span></span><br><span class="line">                    ):</span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br></pre></td></tr></table></figure><h2 id="后台美化"><a href="#后台美化" class="headerlink" title="后台美化"></a>后台美化</h2><p>首先，我们装一下美化用的<code>simpleui</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django-simpleui</span><br></pre></td></tr></table></figure><p>接着，在settings.py里面修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/backend/settings.py</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;simpleui&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;blog&#x27;</span> </span><br></pre></td></tr></table></figure><p>完成后，重启项目，就会发现后台<em>变漂亮啦</em>！</p><h2 id="注册到后台"><a href="#注册到后台" class="headerlink" title="注册到后台"></a>注册到后台</h2><p>之前应该是漏讲了一个地方，没有把模型注册到后台，所以我们在admin.py中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend/blog/admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article, Column, Tag</span><br><span class="line">admin.site.register(Article)</span><br><span class="line">admin.site.register(Column)</span><br><span class="line">admin.site.register(Tag)</span><br></pre></td></tr></table></figure><p>然后就可以在后台写文章啦！</p><blockquote><p>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> 后端 </tag>
            
            <tag> 后台 </tag>
            
            <tag> 拓展 </tag>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+drf全栈教程：后端初试</title>
      <link href="/2020/07/25/vue-drf-backend-try/"/>
      <url>/2020/07/25/vue-drf-backend-try/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  经常关注的老读者可能发现了，把前端UI美化工具换掉了，换成了Ant Design的vue版本，因为element的导航栏不太合适，敬请谅解！</p></blockquote><p>这篇文章，将带大家简单地体验一下django的模型，视图，以及drf特有的序列化！</p><p>首先，让我们进入跟目录，录执行命令创建django的第一个APP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> backend <span class="comment"># 进入我们先前创建的djangoAPP的目录</span></span><br><span class="line">python3 manage.py startapp blog <span class="comment"># 创建我们一会要写后端代码的APP</span></span><br></pre></td></tr></table></figure><p>然后注册我们这个APP到settings.py中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;blog&#x27;</span> <span class="comment"># 新增</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>好了，正式开始写模型，视图和序列化。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>在<code>backend/blog/models.py</code>中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    main = models.CharField(max_length=<span class="number">10000</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = (<span class="string">&#x27;-created&#x27;</span>,)</span><br><span class="line">        verbose_name = <span class="string">&quot;文章 Article&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>如果你先前从没接触过django，这段内容还是有难度的，我一步步讲解：</p><ol><li><code>modles.py</code>文件用来定义模型，写django为我们封装好的代码，这里我们创建了一个<code>Article</code>类，并给他定义了<code>title</code>,<code>body</code>,<code>main</code>,<code>created</code>,<code>updated</code>，还定义了排序方式和在后台中的名称，并要求他在后台显示时返回某条目的标题。</li><li><code>created</code>,<code>updated</code>这两个字段是和创建的日期，时间相关的内容，不需要太在意</li><li>内部类<code>Meta</code>定义了一下配置，这里是<strong>排序</strong>和<strong>后台中的名称</strong></li><li>·<code>__str__</code>表示在后台中返回的字段，这里返回<code>title</code></li></ol><blockquote><p>  注意：如果你学习此教程特别困难，可以先阅读django的官方文档进行学习</p></blockquote><p>定义好模型后还有一件事要做，只有在命令行中执行命令，更改才会生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>接着，我们对刚才定义的模型进行序列化。在<code>blog</code>目录下新建<code>serializer.py</code>,并写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Article</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;main&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;created&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;updated&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;column&#x27;</span></span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>序列化可以理解成<strong>把数据转化为前端可以读取的格式</strong>，只需要写相应的字段，drf会帮我们字段序列化。</p><h2 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h2><p>这里的视图我们直接使用视图集，如果读者想了解更多关于视图的写法，可以看文档，这里我们这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, mixins</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    queryset = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = ArticleSerializer</span><br></pre></td></tr></table></figure><p>看吧，代码就是这么短，因为<em>drf已经帮我们封装好复杂的代码啦</em>。这里，我们导入了模型和序列化器，并继承了所以常用类的封装。</p><blockquote><p>  除了知道怎么用外，我们也应该知道原理，是吧。所以，这里就简单告诉大家他的作用和前后端分离的原理。</p><p>  <strong>作用：</strong>读取数据库内容并生成json格式的数据</p><p>  <strong>原理：</strong>后端发送json格式的数据，前端读取数据并展示</p></blockquote><p>好了，做完这个，我们还需要注册到路由中。编辑<code>backend/backend/urls.py</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blog.views <span class="keyword">import</span> ArticleViewSet <span class="comment"># 新增,从blog目录中导入视图集</span></span><br><span class="line"></span><br><span class="line">router = DefaultRouter() <span class="comment"># 已有代码</span></span><br><span class="line">router.register(<span class="string">r&#x27;articles&#x27;</span>, ArticleViewSet, basename=<span class="string">&#x27;article&#x27;</span>) <span class="comment"># 新增，注册APP到api中</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>最最激动人心的时刻到啦，我们重启服务，打开浏览器，访问<a href="http://127.0.0.1:8000/api/articles/">http://127.0.0.1:8000/api/articles/</a>，在下方的输入框中随便输入一些内容并提交，应该就可以看到这样的页面啦：<br><img src="https://s1.ax1x.com/2020/07/25/aS6Ids.png" alt="aS6Ids.png"></p><blockquote><p> 一则博主最近比较忙碌，二则遇到了一个前端的难题，所以教程更新<strong>会是龟速</strong>，读者们谅解下<br>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mtv </tag>
            
            <tag> drf </tag>
            
            <tag> 后端 </tag>
            
            <tag> 初试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程：前端项目分解</title>
      <link href="/2020/07/18/drf-vue-frontend-fj/"/>
      <url>/2020/07/18/drf-vue-frontend-fj/</url>
      
        <content type="html"><![CDATA[<p>这篇文章，我们系统的学习一下<em>vue前端项目主要文件的作用</em>。</p><blockquote><p>  注意：这一章内容相对有难度，也很重要，注意认真学习！</p></blockquote><h2 id="分析项目结构"><a href="#分析项目结构" class="headerlink" title="分析项目结构"></a>分析项目结构</h2><p>首先，我们分析一下项目目录主要结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flask-vue-todo</span><br><span class="line">├─frontend    <span class="comment"># 存放前端文件</span></span><br><span class="line">├─backend    <span class="comment"># 存放后端文件</span></span><br></pre></td></tr></table></figure><p>后端文件的目录就是我们新建的djangoAPP，前端目录是vue项目，这篇文章主要讲前端目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">frontend</span><br><span class="line">├─node_modules</span><br><span class="line">├─src</span><br><span class="line">├─public</span><br><span class="line">├─static <span class="comment"># 不用管</span></span><br><span class="line">├─<span class="built_in">test</span> <span class="comment"># 不用管</span></span><br></pre></td></tr></table></figure><p>这里只列举了一些重要文件夹，其他package.json等文件就不说了，也和项目没太大关系，接下去一步步分析这些文件夹的作用。</p><p><strong>1，node_modules：</strong>存放下载的开发环境和生产环境的各种依赖</p><p><strong>2，src：</strong>工程项目的源码以及资源，包括页面图片、路由组件、路由配置、vuex、入口文件等，也是<strong>我们要写代码的地方</strong>。</p><p><strong>2，public：</strong>存放html,ico等文件</p><p>接下来再着重分析src文件夹下面的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─router</span><br><span class="line">├─App.vue</span><br><span class="line">├─main.js</span><br><span class="line">├─view <span class="comment"># 不用管</span></span><br></pre></td></tr></table></figure><p><strong>1，assets：</strong>存放图片文件</p><p><strong>2，components：</strong>存放<code>.vue</code>文件</p><p><strong>3，router：</strong>存放路由配置文件</p><p><strong>4，App.vue：</strong>入口文件</p><p><strong>5，main.js：</strong>配置文件</p><h2 id="认识我们需要的文件后缀"><a href="#认识我们需要的文件后缀" class="headerlink" title="认识我们需要的文件后缀"></a>认识我们需要的文件后缀</h2><p>我们会用到三个文件后缀，再次讲一下：</p><ol><li><code>.py</code>：<code>Python</code>文件，这个大家都知道，是写后端代码的</li><li><code>.js</code>：<code>JavaScript</code>文件，在本项目中，大多是配置类的文件，文件像这样：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">HelloWorld</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Jacky的编程空间&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li><code>.vue</code>：<code>vuejs</code>的文件，用vuejs特有的语法，文件像这样，常分为<code>HTML</code>,<code>JavaScript</code>两个部分：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 另外注明一下，由于博主闲暇时间不多，且也是刚开始学vue，所以教程更新会很慢，多多谅解<br>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程：初始化后端项目</title>
      <link href="/2020/07/18/drf-vue-backend-chushihua/"/>
      <url>/2020/07/18/drf-vue-backend-chushihua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  突然想起还没有告诉大家项目的github仓库地址，</p><p>  就在这里说一下吧：<a href="https://github.com/jackyfzh/j_drf_blog">https://github.com/jackyfzh/j_drf_blog</a></p><p>  喜欢记得star哦！</p></blockquote><p>好了，回归正题，我们开始初始化后端项目！</p><h2 id="配置settings-py"><a href="#配置settings-py" class="headerlink" title="配置settings.py"></a>配置settings.py</h2><p>有三个地方：</p><h4 id="第一个：已安装APP"><a href="#第一个：已安装APP" class="headerlink" title="第一个：已安装APP"></a>第一个：已安装APP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>, <span class="comment"># 新增（drf前后端分离）</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="第二个：语言和时间"><a href="#第二个：语言和时间" class="headerlink" title="第二个：语言和时间"></a>第二个：语言和时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-Hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="第三个：静态文件和模板"><a href="#第三个：静态文件和模板" class="headerlink" title="第三个：静态文件和模板"></a>第三个：静态文件和模板</h4><p>在末尾新增：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态资源</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span> </span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态资源</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在文件中间找到并修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)], <span class="comment"># 修改</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置urls-py"><a href="#配置urls-py" class="headerlink" title="配置urls.py"></a>配置urls.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter() <span class="comment"># 初始化后端路由</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), <span class="comment"># admin后台</span></span><br><span class="line">    path(<span class="string">&quot;api/&quot;</span>, include(router.urls)), <span class="comment"># drf的api</span></span><br><span class="line">    path(<span class="string">&quot;api/auth/&quot;</span>, include(<span class="string">&quot;rest_framework.urls&quot;</span>, namespace=<span class="string">&quot;rest_framework&quot;</span>)), <span class="comment"># 登录api</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># media配置</span></span><br><span class="line">urlpatterns+=static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>这里不理解暂时没有关系，只需要知道<strong>drf前后端分离的后端是没有给用户展示的界面的，这些都是我们要用vue调用的接口，后端配置的路由用来检查接口</strong>就可以了。</p><p>接下来我们测试一下，重启项目，浏览器访问<a href="http://127.0.0.1:8000/api%EF%BC%8C%E5%BA%94%E8%AF%A5%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%99%E6%A0%B7%E7%9A%84%E7%95%8C%E9%9D%A2%E4%BA%86%EF%BC%9A">http://127.0.0.1:8000/api，应该可以看到这样的界面了：</a></p><p><img src="https://blog-1253812787.cos.ap-chengdu.myqcloud.com/browsable_api_index_page.png" alt="img"></p><blockquote><p>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> 初始化 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程：环境搭建</title>
      <link href="/2020/07/17/drf-vue-huanjing/"/>
      <url>/2020/07/17/drf-vue-huanjing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  开始前的提示：</p><ol><li><p>教程的github仓库地址：<a href="https://github.com/jackyfzh/drf_learn">https://github.com/jackyfzh/drf_learn</a></p></li><li><p>教程是博主自己的学习笔记，也是做一篇写一篇，可能有一些问题，欢迎高手在评论区指出</p></li><li><p>教程路线：drf → vue.js → vue组件库 → vue结合drf</p></li><li><p>本教程版本,最好和博主保持一致</p></li></ol><ul><li>django 2.x</li><li>vue.js 2.x</li><li>django rest framework 3.x</li><li>Ant Design for vue 1.6.x</li><li>simeple UI 4.x</li></ul></blockquote><p>好了，说了这么多，让我们先搭建开发环境并创建项目吧。</p><h2 id="1，安装"><a href="#1，安装" class="headerlink" title="1，安装"></a>1，安装</h2><p>首先必须要安装好<code>nodejs</code>,<code>pip3</code>,<code>npm</code>和<code>python3</code>,篇幅有限，就不再讲了，请读者自行查阅。安装完成后，打开命令行，输入以下命令创建项目文件夹并安装必要包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> drf_learn</span><br><span class="line"><span class="built_in">cd</span> drf_learn</span><br><span class="line">pipenv shell</span><br><span class="line">pip3 install django==2.2</span><br><span class="line">pip3 install djangorestframework</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>接着，在根目录创建后端项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject backend</span><br><span class="line"><span class="built_in">cd</span> backend</span><br><span class="line">python3 manage.py migrate</span><br><span class="line">python3 manage.py createsuperuser</span><br><span class="line">vue create frontend</span><br></pre></td></tr></table></figure><p>然后，在项目根目录创建vue项目,并跟据自己的需求创建项目</p><p>需要注意的只有一点，<strong>记得选择使用vue-router</strong>，这是我们的路由系统。</p><p>好了，下一章正式开始写代码。</p><blockquote><p>有任何疑问欢迎加QQ群：<strong>Python学习交流 1140464262</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf+vue全栈教程：序言</title>
      <link href="/2020/07/17/drf-vue-xu/"/>
      <url>/2020/07/17/drf-vue-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今年4月开始尝试用Django框架写了一个博客应用，今年想要学习<code>django rest framework</code>，想体验体验前后端分离开发。但是苦于在网上一直没找到优质（免费）的教程，搞得我无心更新，<code>pyecharts详细教程</code>两周没更新了（绝不是因为懒）</p><p>我一直觉得，给自己找一个需求，通过实践来学习某个技术，是最好，也是最快的方式。这次也是一样：在此过程中学习一些新技术。</p><h2 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a>写作目的</h2><p>之前提到在网上没有找到合适的教程，所以只能自己一步步摸索着学习了，与其说这是一个系列教程，不如说是我个人的学习笔记。将它公开到网上，主要是希望给有相同需求的朋友一个参考，同时也希望能被一些前辈高手看到，并不吝赐教。</p><h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><p>如果你想跟我一起学习，那么至少需要以下具备四点条件：</p><ul><li>至少掌握了Python语法基础</li><li>有一台可用的电脑</li><li>会一点django基础</li><li>有一颗坚持不懈（爱折腾）的心</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>学会vue.js</li><li>学会django rest framework</li><li>写出一个前后端分离的博客</li></ol><blockquote><p>  其实，我也是想借此机会把自己的博客好好改一改。</p><p>  如读者们所见，我现在的博客实在太难看了。</p><p>  所以希望读者们先忍一忍，在本教程完结之日，我也会换上好看的博客！</p></blockquote><h2 id="问题交流"><a href="#问题交流" class="headerlink" title="问题交流"></a>问题交流</h2><p>遇到问题可直接在博客评论区留言，或者添加QQ群：<strong>Python学习交流</strong>  <strong>1140464262</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序 </tag>
            
            <tag> django </tag>
            
            <tag> drf </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django相关概念理解</title>
      <link href="/2020/07/11/django-gai-nian/"/>
      <url>/2020/07/11/django-gai-nian/</url>
      
        <content type="html"><![CDATA[<p>Django是使用十分广泛的的<em>重量级</em>web框架，功能完善，使用高效，正所谓<strong>在最短的时间内做出最好的产品</strong>。今天，就从，模型，视图，模板等方面谈谈我的理解。</p><h2 id="模型（models）"><a href="#模型（models）" class="headerlink" title="模型（models）"></a>模型（models）</h2><p><code>ORM</code>，就是（Django）封装数据库后写出的可使用Python代码操作数据库的产品。支持所有主流数据库，比如说<code>mysql</code>，<code>sqlite</code>等等。我们可以在项目app的<code>models.py</code>中指定“表”，这就是模型的相关概念。</p><hr><h2 id="视图（views）"><a href="#视图（views）" class="headerlink" title="视图（views）"></a>视图（views）</h2><p>这一概念相对来说比较难以理解，其实也不难。首先讲讲他的作用：</p><ol><li>操做模型（数据库）</li><li>操作模板（html）</li><li>处理表单（form）</li></ol><p>没错，差不多只有这几个概念，views.py相当于指挥部，也是一个app的核心了。</p><hr><h2 id="模板（html文件）"><a href="#模板（html文件）" class="headerlink" title="模板（html文件）"></a>模板（html文件）</h2><p>也就是（广受后端程序员鄙视的）前端了，也就是<code>html</code>，<code>JavaScript</code>，<code>css</code>等等，最后给用户展示的内容啦。但是Django的模板还有继承（extend），判断（if），循环（for），包含（include），链接（url），静态文件（static）等。值得一提的是，Django和flask不同，不用<code>jinjia2</code>模板引擎，而是自行开发（不得不说其研发能力还是蛮强的）。</p><p>除此之外，还有url路由，form表单等内容，在此不在阐述了</p><p>不过有一张图我很喜欢，讲解的很明确，我在这里贴出来：<br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=631191279,913977358&fm=26&gp=0.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 概念 </tag>
            
            <tag> mtv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts详细教程：绘制基础图表</title>
      <link href="/2020/07/11/pyecharts-jichu/"/>
      <url>/2020/07/11/pyecharts-jichu/</url>
      
        <content type="html"><![CDATA[<p>今天,就教大家绘制pyecharts的基础图表,<em>散点图,直方图和折线图</em></p><h2 id="绘制基础图表"><a href="#绘制基础图表" class="headerlink" title="绘制基础图表"></a>绘制基础图表</h2><hr><h3 id="导入需要的包"><a href="#导入需要的包" class="headerlink" title="导入需要的包"></a>导入需要的包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> * <span class="comment"># 图表</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.components <span class="keyword">import</span> Table <span class="comment"># 表格</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts <span class="comment"># 配置</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.commons.utils <span class="keyword">import</span> JsCode </span><br><span class="line"><span class="keyword">import</span> random <span class="comment"># 随机数</span></span><br><span class="line"><span class="keyword">import</span> datetime <span class="comment">#时间</span></span><br></pre></td></tr></table></figure><p>这就是pyecharts已经我们可能用到的所有库了,导入报错的话需要另外自行安装.</p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">x_data = [<span class="string">&quot;水笔&quot;</span>,<span class="string">&quot;铅笔&quot;</span>,<span class="string">&quot;钢笔&quot;</span>,<span class="string">&quot;圆珠笔&quot;</span>] <span class="comment"># x轴数据</span></span><br><span class="line">y_data = [<span class="number">40</span>,<span class="number">30</span>,<span class="number">98</span>,<span class="number">42</span>] <span class="comment"># y轴数据</span></span><br><span class="line">bar = Bar() <span class="comment"># 初始化图表</span></span><br><span class="line">bar.add_xaxis(x_data) <span class="comment"># x轴</span></span><br><span class="line">bar.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data) <span class="comment"># y轴</span></span><br><span class="line">bar.render() <span class="comment"># 渲染html文件</span></span><br><span class="line"><span class="comment"># bar.render_notebook() # 渲染到notebook,这里不细讲</span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://pic1.zhimg.com/80/v2-8eae29fab3852a5232a475200b3bd015_1440w.png" alt="img" title="img"></p><h4 id="讲解和注意"><a href="#讲解和注意" class="headerlink" title="讲解和注意"></a>讲解和注意</h4><ol><li>数据必须储存为一个列表(<code>y_data</code>,<code>x_data</code>)</li><li>使用前需要初始化,指定图表类型(<code>Bar()</code>)</li><li>pyecharts新版还支持链式调用,博主觉得不习惯,所以就不说了</li><li>渲染到notebook看<a href="https://pyecharts.org/#/zh-cn/notebook">这里</a></li></ol><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">x_data = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;Xiaomi&#x27;</span>, <span class="string">&#x27;Oppo&#x27;</span>, <span class="string">&#x27;Vivo&#x27;</span>, <span class="string">&#x27;Meizu&#x27;</span>] <span class="comment"># x轴数据</span></span><br><span class="line">y_data = [<span class="number">123</span>, <span class="number">153</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">98</span>, <span class="number">23</span>] <span class="comment"># y轴数据</span></span><br><span class="line">line = Line() <span class="comment"># 初始化图表</span></span><br><span class="line">line.add_xaxis(x_data) <span class="comment"># x轴</span></span><br><span class="line">line.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data) <span class="comment"># y轴</span></span><br><span class="line">line.render() <span class="comment"># 渲染html文件</span></span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="https://pic1.zhimg.com/80/v2-4b42e301b8cab4914e9e4c0698ea0dbb_1440w.png" alt="img" title="img"></p><h4 id="讲解和注意-1"><a href="#讲解和注意-1" class="headerlink" title="讲解和注意"></a>讲解和注意</h4><ol><li>x轴数据内容必须是<em><strong>字符串</strong></em></li><li>y轴数据必须是<em><strong>整数</strong></em>或者<em><strong>小数</strong></em></li><li>其他都差不多</li></ol><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">x_data = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;Xiaomi&#x27;</span>, <span class="string">&#x27;Oppo&#x27;</span>, <span class="string">&#x27;Vivo&#x27;</span>, <span class="string">&#x27;Meizu&#x27;</span>] <span class="comment"># x轴数据</span></span><br><span class="line">y_data = [<span class="number">123</span>, <span class="number">153</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">98</span>, <span class="number">23</span>] <span class="comment"># y轴数据</span></span><br><span class="line">scatter = Scatter() <span class="comment"># 初始化</span></span><br><span class="line">scatter.add_xaxis(x_data) <span class="comment"># x轴渲染</span></span><br><span class="line">scatter.add_yaxis(<span class="string">&#x27;&#x27;</span>, y_data) <span class="comment"># y轴渲染</span></span><br><span class="line">scatter.render() <span class="comment"># 渲染HTML</span></span><br></pre></td></tr></table></figure><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img src="https://pic2.zhimg.com/80/v2-a2380dc2f6481ab3b12bcb86894be539_1440w.png" alt="img" title="img"></p><h4 id="讲解和注意-2"><a href="#讲解和注意-2" class="headerlink" title="讲解和注意"></a>讲解和注意</h4><p>和上面都一样的,不要<em>打错字</em>就行了.</p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>现在大家应该都学会基本图表的绘制了吧,下一章会讲解<strong>中级技巧</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyecharts </tag>
            
            <tag> 基础图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts详细教程：环境搭建</title>
      <link href="/2020/07/11/pyecharts-huanjing/"/>
      <url>/2020/07/11/pyecharts-huanjing/</url>
      
        <content type="html"><![CDATA[<p>俗话说,”工欲善其事,必先利其器”,今天,我们就来搭建pyecharts的环境吧!</p><h2 id="搭建Python环境"><a href="#搭建Python环境" class="headerlink" title="搭建Python环境"></a>搭建Python环境</h2><p>这个我就不多说了,大家应该都有,没有的话参见以下教程:</p><ul><li><p>廖雪峰的个人网站:<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624">安装Python</a></p></li><li><p>百度经验:<a href="https://jingyan.baidu.com/article/03b2f78c1e39d35ea237ae04.html">Python环境搭建和配置</a></p></li></ul><h2 id="合适的编辑器"><a href="#合适的编辑器" class="headerlink" title="合适的编辑器"></a>合适的编辑器</h2><p>如果是做数据分析,推荐以下四款编辑器:</p><h3 id="notebook系列"><a href="#notebook系列" class="headerlink" title="notebook系列"></a>notebook系列</h3><hr><h4 id="Jupyter-lab-四星-推荐"><a href="#Jupyter-lab-四星-推荐" class="headerlink" title="Jupyter lab [四星(推荐)]"></a>Jupyter lab [四星(推荐)]</h4><p>推荐教程:<br><a href="https://zhuanlan.zhihu.com/p/87403131">JupyterLab，极其强大的下一代notebook！</a></p><h4 id="Jupyter-notebook-二星"><a href="#Jupyter-notebook-二星" class="headerlink" title="Jupyter notebook [二星]"></a>Jupyter notebook [二星]</h4><p>推荐教程:<br><a href="https://zhuanlan.zhihu.com/p/127839755">小白都能看懂的Jupyter安装教程，带你绕过很多坑（Windows版）</a></p><h3 id="文本编辑器系列"><a href="#文本编辑器系列" class="headerlink" title="文本编辑器系列"></a>文本编辑器系列</h3><hr><h4 id="Visual-Studio-Code-Vscode-五星-推荐"><a href="#Visual-Studio-Code-Vscode-五星-推荐" class="headerlink" title="Visual Studio Code (Vscode) [五星(推荐)]"></a>Visual Studio Code (Vscode) [五星(推荐)]</h4><p>推荐教程:<br><a href="https://zhuanlan.zhihu.com/p/126322646">VSCode配置Python环境指南</a></p><h4 id="Pycharm-三星-没用过"><a href="#Pycharm-三星-没用过" class="headerlink" title="Pycharm [三星(没用过)]"></a>Pycharm [三星(没用过)]</h4><p>推荐教程:<br><a href="https://zhuanlan.zhihu.com/p/139903697">pycharm的安装和配置</a></p><h2 id="pyecharts安装"><a href="#pyecharts安装" class="headerlink" title="pyecharts安装"></a>pyecharts安装</h2><p>接下来安装pyecharts数据分析工具,pip3有三种安装方法:</p><ol><li>直接安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyecharts</span><br></pre></td></tr></table></figure><ol start="2"><li>限时安装(防报错)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 --<span class="built_in">timeout</span>=100 install pyecharts</span><br></pre></td></tr></table></figure><ol start="3"><li>换源安装(飞速)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyecharts -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><ol start="4"><li>综合(推荐)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 --<span class="built_in">timeout</span>=100 install pyecharts -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="基本完成"><a href="#基本完成" class="headerlink" title="基本完成"></a>基本完成</h3><p>这样环境就搭建完成了,可以开始绘图啦,绘图的内容下一章讲!</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> pyecharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts详细教程：序言</title>
      <link href="/2020/07/11/pyecharts-xu/"/>
      <url>/2020/07/11/pyecharts-xu/</url>
      
        <content type="html"><![CDATA[<p><code>pyecharts</code>是百度开源的<code>echarts</code>的python接口,是使用十分方便的<strong>Python数据可视化工具</strong>,功能强大,可以绘制几乎所有<em>静态图表</em>，和matplotlib系列媲美,使用简单,适合初学者使用,本教程会详细的讲解如何用它绘制漂亮的图表.</p><h2 id="教程特点"><a href="#教程特点" class="headerlink" title="教程特点"></a>教程特点</h2><ol><li>零基础、免费、中文、完整实例代码</li><li>基于Python 3.7、Django 2.2、Bootstrap 4</li><li>博主热情的技术支持</li></ol><h2 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h2><ol><li>拥有一台能开机的电脑</li><li>有一点基础的 python 编程知识</li><li>每天能抽出一个小时学习<br> 不要犹豫说的就是你，现在立刻开始pyecharts的学习吧！</li></ol><h2 id="资源列表"><a href="#资源列表" class="headerlink" title="资源列表"></a>资源列表</h2><ol><li>本教程的代码托管在GitHub:<a href="https://github.com/jackyfzh/pyecharts_demo">pyecharts_demo</a></li><li>本教程代码托管在Gitee：<a href="https://gitee.com/jackyfzh/pyecharts_demo">pyecharts_demo</a></li><li>pyecharts的官方网站：<a href="https://pyecharts.org/">pyecharts</a></li><li>和鲸社区:<a href="https://www.kesci.com/home/project/5eb7958f366f4d002d783d4a">【pyecharts教程】应该是全网最全的教程了～</a></li></ol><h2 id="遇到困难时怎么办"><a href="#遇到困难时怎么办" class="headerlink" title="遇到困难时怎么办"></a>遇到困难时怎么办</h2><ol><li><p>认真检查代码拼写、缩进是否正确。一个标点符号的错误可能会导致难以发现的问题</p></li><li><p>较简单的问题直接询问百度；若无法得到满意的答案请尝试 Google 以英文关键字搜索。要坚信全世界这么多学习 pyecharts的人，你遇到的问题别人早就遇到过了</p></li><li><p>pyecharts官方网站是最权威的学习文档,要有耐心仔细阅读</p></li><li><p>在本教程下留言，博主会尽量帮忙解决</p></li><li><p>实在无法处理的问题，可以暂时跳过。待到技术水平上升台阶，再回头来解决问题</p></li><li><p>若以上办法均不能解决你的问题，请在StackOverflow等技术网站上求助，那里有海量的热心程序员在等着你的问题</p></li></ol><h2 id="提问须知"><a href="#提问须知" class="headerlink" title="提问须知"></a>提问须知</h2><p>随着教程的读者增加，向博主求助的人也越来越多。博主会在力所能及的情况下帮助每一个人，但是面对读者千奇百怪的开发问题，精力实在有限。在此说明提问规范，提高沟通效率.能够在博客评论区说清楚的问题，请尽量通过评论提问。这样做的好处是其他读者也都能够看到，方便大家一起讨论、解决类似的问题。评论时请精炼语言并稍加排版，帮助博主节省一点点精力。如果你的问题必须结合图片说明、或者特别难描述清楚的，可以通过 Email 提问。请详细描述你的意图、遇到的问题，然后将所有相关的代码、报错、配置等信息展示给我。博主不是技术大牛，没办法仅凭一句话或者一张图来帮你排查问题。如果以上方法均无效，请先与博主沟通，将项目打包发送给博主，运行你的代码来查找问题。请注意这是最后才考虑的提问方式，虽然博主很乐于和读者交流技术，但很多时候没有精力逐个排查网友的代码。通过这种方式提问一定记得生成requirements.txt文件，方法请自行搜索。</p><h2 id="关于pyecharts版本"><a href="#关于pyecharts版本" class="headerlink" title="关于pyecharts版本"></a>关于pyecharts版本</h2><p>pyecharts近期有<em>大版本更新</em>,注意本教程基于最新的(v1版本)版本,不要看错.</p><p>现在网上的个人教程(除了官方文档)都是基于旧版的,要注意不要踩坑!</p><h2 id="是时候展现真正的技术了"><a href="#是时候展现真正的技术了" class="headerlink" title="是时候展现真正的技术了"></a>是时候展现真正的技术了</h2><p>说了这么多，相信你已经迫不及待了。让我们赶紧开始旅程吧！</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyecharts </tag>
            
            <tag> 序言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django工作小站开发思路</title>
      <link href="/2020/07/11/django-work-site/"/>
      <url>/2020/07/11/django-work-site/</url>
      
        <content type="html"><![CDATA[<p>前段时间开始学习Django，也搭建了自己的<a href="http://jackypy.xyz/">个人网站</a>,在腾讯云上部署后，便接着开始了python的学习。这次还是做<em>web项目</em>，不过更<em>高级</em>一点。这次不跟着别人的脚步走，<strong>另辟蹊径</strong>，制作一个有关工作效率的项目。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>这次的项目不仅仅是<em>前端代码</em>，还设计一些<em>算法的内容</em>，也就是有关<strong>工作效率计算</strong>的地方。</p><p>大概是这么一个公式（可能不太合理，所以也没打算把这个项目上线，<em>小学生水平</em>）：工作量×工作难度÷工作时间&#x3D;工作效率。</p><p>评价标准：</p><ol><li>四分以上：优秀</li><li>三分以上：良好</li><li>一点五分以上：合格</li><li>一点五分一下：不合格</li></ol><p>除此之外，在两个时间相减的地方也做了<em>切片</em>（简单来说就是把数据分成几份），方便计算（因为我要开始和结束计算两个时间的差，但是格式不同，不能一起计算。所以写了个切片的小算法，进行格式转换。）</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>该项目主要是<em>方便工作</em>，且正在开发中，所以功能暂且不多。</p><h3 id="万年历-非重点"><a href="#万年历-非重点" class="headerlink" title="万年历[非重点]"></a>万年历[非重点]</h3><p>使用了<a href="https://github.com/year-calendar/js-year-calendar">js-yeat-calendar</a>日历插件作为一种小工具（非重点）</p><p><a href="https://imgchr.com/i/NR0VgA"><img src="https://s1.ax1x.com/2020/06/28/NR0VgA.md.png" alt="NR0VgA.md.png"></a></p><h3 id="备忘录-非重点"><a href="#备忘录-非重点" class="headerlink" title="备忘录[非重点]"></a>备忘录[非重点]</h3><p>由一个个类似卡片的容器组成，记录一些容易忘的小事情，更像是便签</p><p><a href="https://imgchr.com/i/NR0gDx"><img src="https://s1.ax1x.com/2020/06/28/NR0gDx.png" alt="便签"></a></p><h3 id="工作台-重头戏"><a href="#工作台-重头戏" class="headerlink" title="工作台[重头戏]"></a>工作台[重头戏]</h3><h4 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h4><p>调用了<a href="https://github.com/CodeHimBlog/jquery-codehim-analog-clock">codehim</a>时钟插件，效果还不错：</p><p><a href="https://imgchr.com/i/NhddH0"><img src="https://s1.ax1x.com/2020/06/29/NhddH0.md.png" alt="NhddH0.md.png"></a></p><h4 id="工作效率记录"><a href="#工作效率记录" class="headerlink" title="工作效率记录"></a>工作效率记录</h4><p>该功能记录自己工作的开始时间，结束时间，工作量，工作难度等内容。通过<em>自己制作的公式</em>进行计算，分析，最后可以对该项目的工作效率进行评估。另外，还专门制作了<em>使大家更快速指定计划</em>的<strong>模板工具</strong>，只需要一次制定，以后就可以一键添加啦！</p><p><a href="https://imgchr.com/i/NLPbIs"><img src="https://s1.ax1x.com/2020/07/02/NLPbIs.md.png" alt="NLPbIs.md.png"></a></p><p><a href="https://imgchr.com/i/NhwURe"><img src="https://s1.ax1x.com/2020/06/29/NhwURe.md.png" alt="NhwURe.md.png"></a></p><h3 id="工作必要的一些插件（未开发）-辅助功能"><a href="#工作必要的一些插件（未开发）-辅助功能" class="headerlink" title="工作必要的一些插件（未开发）[辅助功能]"></a>工作必要的一些插件（未开发）[辅助功能]</h3><p>大概就是markdown编辑器，PDF转换，备份，解压缩之类的，后续开发。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 开发思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客序言</title>
      <link href="/2020/07/01/blog-xu/"/>
      <url>/2020/07/01/blog-xu/</url>
      
        <content type="html"><![CDATA[<p>今天，是我的hexo个人博客上线的第一天，那么，我就简要介绍我的博客以及我自己吧。</p><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><hr><p>现在这个博客是我的<strong>小站</strong>，欢迎看我的<a href="https://jackypy.xyz/">大站</a>。说来，很奇怪，既然有网站了，为什么还要一个呢？其实，我是感觉<em>大站明年没法续费，会关掉</em>，所以做个GitHub Pages小站备用，而且小站也漂亮点，文章会尽快同步过来的。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><hr><p>我，一名上海的小学生，明年也就初中了。今年寒假开始搭建我的博客，也没有什么其他技能和爱好，也就写写文章，学学python，给大家分享知识啦。当然，文笔一般，别嫌弃就好。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
